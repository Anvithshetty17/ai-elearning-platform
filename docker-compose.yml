version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: ai-elearning-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai-elearning
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-elearning-network

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ai-elearning-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/ai-elearning?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key-change-in-production}
      JWT_EXPIRE: 30d
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      ML_SERVICE_URL: http://ml-services:5001
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - ml-services
    volumes:
      - ./server/uploads:/app/uploads
    networks:
      - ai-elearning-network

  # ML Services (Python/Flask)
  ml-services:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
    container_name: ai-elearning-ml-services
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      FLASK_PORT: 5001
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      TTS_API_KEY: ${TTS_API_KEY}
    ports:
      - "5001:5001"
    volumes:
      - ./ml-services/temp:/app/temp
      - ./ml-services/models:/app/models
    networks:
      - ai-elearning-network

  # React Frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:5000/api
        REACT_APP_ML_API_URL: http://localhost:5001/api
    container_name: ai-elearning-client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - server
    networks:
      - ai-elearning-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-elearning-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
      - ml-services
    networks:
      - ai-elearning-network

  # Redis for Caching (Optional)
  redis:
    image: redis:alpine
    container_name: ai-elearning-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-elearning-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-elearning-network:
    driver: bridge

# Health checks and monitoring
x-healthcheck: &healthcheck
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

# Logging configuration
x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 10m
      max-file: "3"